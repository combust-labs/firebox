// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Firebox",
    "title": "firebox",
    "version": "Latest"
  },
  "basePath": "/",
  "paths": {
    "/-/healthy": {
      "get": {
        "description": "This endpoint returns a 200 status code when the HTTP server is up running.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check health status",
        "operationId": "isHealthy",
        "responses": {
          "200": {
            "description": "healthStatus",
            "schema": {
              "$ref": "#/definitions/HealthHealthy"
            }
          },
          "500": {
            "description": "The standard error format",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "503": {
            "description": "healthNotHealthyStatus",
            "schema": {
              "$ref": "#/definitions/HealthServiceUnavailable"
            }
          }
        }
      }
    },
    "/-/ready": {
      "get": {
        "description": "This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies are responsive as well.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check readiness status",
        "operationId": "isReady",
        "responses": {
          "200": {
            "description": "healthStatus",
            "schema": {
              "$ref": "#/definitions/HealthHealthy"
            }
          },
          "500": {
            "description": "The standard error format",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "503": {
            "description": "healthNotReadyStatus",
            "schema": {
              "$ref": "#/definitions/HealthServiceUnavailable"
            }
          }
        }
      }
    },
    "/invoke": {
      "post": {
        "description": "Invoke test service.",
        "tags": [
          "service"
        ],
        "operationId": "invoke",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HTTPRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HTTPResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      }
    },
    "/vm/run": {
      "post": {
        "description": "This endpoint creates a new VM and starts it",
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VM"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "HTTPRequest": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "x-omitempty": true
        },
        "cookies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "httpMethod": {
          "type": "string",
          "x-omitempty": false
        },
        "isBase64Encoded": {
          "description": "A boolean flag to indicate if the body is Base64-encoded",
          "type": "boolean",
          "x-omitempty": false
        },
        "multiValueHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-omitempty": false
        },
        "rawPath": {
          "description": "encoded path hint (see EscapedPath method)",
          "type": "string",
          "x-omitempty": false
        },
        "rawQueryString": {
          "description": "encoded query values, without '?'",
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "HTTPResponse": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "x-omitempty": true
        },
        "cookies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "isBase64Encoded": {
          "description": "A boolean flag to indicate if the body is Base64-encoded",
          "type": "boolean",
          "x-omitempty": false
        },
        "multiValueHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-omitempty": true
        },
        "statusCode": {
          "type": "integer"
        }
      }
    },
    "HealthHealthy": {
      "type": "object",
      "properties": {
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "status": {
          "description": "Status always contains \"OK\".",
          "type": "string"
        }
      }
    },
    "HealthServiceUnavailable": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "Errors contains a list of errors that caused the not ready status.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "description": "Status always contains \"NOT OK\".",
          "type": "string"
        }
      }
    },
    "StandardError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "VM": {
      "description": "Virtual Machine",
      "type": "object",
      "properties": {
        "id": {
          "description": "Virtual Machine ID.",
          "type": "string"
        },
        "ip": {
          "description": "IP address of VM",
          "type": "string"
        }
      }
    }
  },
  "x-schemes": [
    "unix"
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Firebox",
    "title": "firebox",
    "version": "Latest"
  },
  "basePath": "/",
  "paths": {
    "/-/healthy": {
      "get": {
        "description": "This endpoint returns a 200 status code when the HTTP server is up running.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check health status",
        "operationId": "isHealthy",
        "responses": {
          "200": {
            "description": "healthStatus",
            "schema": {
              "$ref": "#/definitions/HealthHealthy"
            }
          },
          "500": {
            "description": "The standard error format",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "503": {
            "description": "healthNotHealthyStatus",
            "schema": {
              "$ref": "#/definitions/HealthServiceUnavailable"
            }
          }
        }
      }
    },
    "/-/ready": {
      "get": {
        "description": "This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies are responsive as well.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check readiness status",
        "operationId": "isReady",
        "responses": {
          "200": {
            "description": "healthStatus",
            "schema": {
              "$ref": "#/definitions/HealthHealthy"
            }
          },
          "500": {
            "description": "The standard error format",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "503": {
            "description": "healthNotReadyStatus",
            "schema": {
              "$ref": "#/definitions/HealthServiceUnavailable"
            }
          }
        }
      }
    },
    "/invoke": {
      "post": {
        "description": "Invoke test service.",
        "tags": [
          "service"
        ],
        "operationId": "invoke",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HTTPRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HTTPResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      }
    },
    "/vm/run": {
      "post": {
        "description": "This endpoint creates a new VM and starts it",
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VM"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "HTTPRequest": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "x-omitempty": true
        },
        "cookies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "httpMethod": {
          "type": "string",
          "x-omitempty": false
        },
        "isBase64Encoded": {
          "description": "A boolean flag to indicate if the body is Base64-encoded",
          "type": "boolean",
          "x-omitempty": false
        },
        "multiValueHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-omitempty": false
        },
        "rawPath": {
          "description": "encoded path hint (see EscapedPath method)",
          "type": "string",
          "x-omitempty": false
        },
        "rawQueryString": {
          "description": "encoded query values, without '?'",
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "HTTPResponse": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "x-omitempty": true
        },
        "cookies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "isBase64Encoded": {
          "description": "A boolean flag to indicate if the body is Base64-encoded",
          "type": "boolean",
          "x-omitempty": false
        },
        "multiValueHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-omitempty": true
        },
        "statusCode": {
          "type": "integer"
        }
      }
    },
    "HealthHealthy": {
      "type": "object",
      "properties": {
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "status": {
          "description": "Status always contains \"OK\".",
          "type": "string"
        }
      }
    },
    "HealthServiceUnavailable": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "Errors contains a list of errors that caused the not ready status.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "description": "Status always contains \"NOT OK\".",
          "type": "string"
        }
      }
    },
    "StandardError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "VM": {
      "description": "Virtual Machine",
      "type": "object",
      "properties": {
        "id": {
          "description": "Virtual Machine ID.",
          "type": "string"
        },
        "ip": {
          "description": "IP address of VM",
          "type": "string"
        }
      }
    }
  },
  "x-schemes": [
    "unix"
  ]
}`))
}
