// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IsHealthyHandlerFunc turns a function with the right signature into a is healthy handler
type IsHealthyHandlerFunc func(IsHealthyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IsHealthyHandlerFunc) Handle(params IsHealthyParams) middleware.Responder {
	return fn(params)
}

// IsHealthyHandler interface for that can handle valid is healthy params
type IsHealthyHandler interface {
	Handle(IsHealthyParams) middleware.Responder
}

// NewIsHealthy creates a new http.Handler for the is healthy operation
func NewIsHealthy(ctx *middleware.Context, handler IsHealthyHandler) *IsHealthy {
	return &IsHealthy{Context: ctx, Handler: handler}
}

/* IsHealthy swagger:route GET /-/healthy health isHealthy

Check health status

This endpoint returns a 200 status code when the HTTP server is up running.

*/
type IsHealthy struct {
	Context *middleware.Context
	Handler IsHealthyHandler
}

func (o *IsHealthy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewIsHealthyParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
