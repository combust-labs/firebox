// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IsReadyHandlerFunc turns a function with the right signature into a is ready handler
type IsReadyHandlerFunc func(IsReadyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IsReadyHandlerFunc) Handle(params IsReadyParams) middleware.Responder {
	return fn(params)
}

// IsReadyHandler interface for that can handle valid is ready params
type IsReadyHandler interface {
	Handle(IsReadyParams) middleware.Responder
}

// NewIsReady creates a new http.Handler for the is ready operation
func NewIsReady(ctx *middleware.Context, handler IsReadyHandler) *IsReady {
	return &IsReady{Context: ctx, Handler: handler}
}

/* IsReady swagger:route GET /-/ready health isReady

Check readiness status

This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies are responsive as well.

*/
type IsReady struct {
	Context *middleware.Context
	Handler IsReadyHandler
}

func (o *IsReady) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewIsReadyParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
