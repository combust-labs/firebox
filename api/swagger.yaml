---
swagger: '2.0'
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
  - https
x-schemes:
  - unix
info:
  description: 'Firebox'
  title: firebox
  version: Latest
basePath: /
paths:
  /vm/run:
    post:
      description: |-
        This endpoint creates a new VM and starts it
      tags:
        - vm
      responses:
        '200':
          description: Success
          schema:
            "$ref": "#/definitions/VM"
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/StandardError'
  /invoke:
    post:
      description: |-
        Invoke test service.
      tags:
        - service
      operationId: invoke
      parameters:
        - name: data
          in: body
          required: true
          schema:
            "$ref": '#/definitions/HTTPRequest'
      responses:
        200:
          description: Success
          schema:
            "$ref": "#/definitions/HTTPResponse"
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/StandardError'
        '503':
          description: Service Unavailable
          schema:
            $ref: '#/definitions/StandardError'
  /-/healthy:
    get:
      description: |-
        This endpoint returns a 200 status code when the HTTP server is up running.
      produces:
        - application/json
      tags:
        - health
      summary: Check health status
      operationId: isHealthy
      responses:
        '200':
          description: healthStatus
          schema:
            $ref: '#/definitions/HealthHealthy'
        '503':
          description: healthNotHealthyStatus
          schema:
            $ref: '#/definitions/HealthServiceUnavailable'
        '500':
          description: The standard error format
          schema:
            $ref: '#/definitions/StandardError'
  /-/ready:
    get:
      description: |-
        This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies are responsive as well.
      produces:
        - application/json
      tags:
        - health
      summary: Check readiness status
      operationId: isReady
      responses:
        '200':
          description: healthStatus
          schema:
            $ref: '#/definitions/HealthHealthy'
        '503':
          description: healthNotReadyStatus
          schema:
            $ref: '#/definitions/HealthServiceUnavailable'
        '500':
          description: The standard error format
          schema:
            $ref: '#/definitions/StandardError'
definitions:
  StandardError:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
      details:
        type: array
        items:
          type: object
          additionalProperties: true
  HealthServiceUnavailable:
    type: object
    properties:
      status:
        description: Status always contains "NOT OK".
        type: string
      errors:
        description: Errors contains a list of errors that caused the not ready status.
        type: object
        additionalProperties:
          type: string
  HealthHealthy:
    type: object
    properties:
      status:
        description: Status always contains "OK".
        type: string
      details:
        type: array
        items:
          type: object
          additionalProperties: true
  VM:
    description: Virtual Machine
    type: object
    properties:
      id:
        description: Virtual Machine ID.
        type: string
      ip:
        description: IP address of VM
        type: string
  HTTPRequest:
    type: object
    properties:
      httpMethod:
        x-omitempty: false
        type: string
      rawPath:
        description: "encoded path hint (see EscapedPath method)"
        x-omitempty: false
        type: string
      rawQueryString:
        description: "encoded query values, without '?'"
        x-omitempty: false
        type: string
      cookies:
        x-omitempty: true
        type: array
        items:
          type: string
      headers:
        x-omitempty: false
        type: object
        additionalProperties:
          type: string
      multiValueHeaders:
        x-omitempty: false
        type: object
        additionalProperties:
          type: array
          items:
            type: string
      body:
        x-omitempty: true
        type: string
      isBase64Encoded:
        description: "A boolean flag to indicate if the body is Base64-encoded"
        x-omitempty: false
        type: boolean
  HTTPResponse:
    type: object
    properties:
      statusCode:
        type: integer
      headers:
        x-omitempty: false
        type: object
        additionalProperties:
          type: string
      multiValueHeaders:
        x-omitempty: true
        type: object
        additionalProperties:
          type: array
          items:
            type: string
      cookies:
        x-omitempty: true
        type: array
        items:
          type: string
      body:
        x-omitempty: true
        type: string
      isBase64Encoded:
        description: "A boolean flag to indicate if the body is Base64-encoded"
        x-omitempty: false
        type: boolean
